unit uFrmPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore, dxSkinBasic,
  dxSkinBlack, dxSkinBlue, dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee,
  dxSkinDarkroom, dxSkinDarkSide, dxSkinDevExpressDarkStyle,
  dxSkinDevExpressStyle, dxSkinFoggy, dxSkinGlassOceans, dxSkinHighContrast,
  dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky,
  dxSkinMcSkin, dxSkinMetropolis, dxSkinMetropolisDark, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinOffice2013DarkGray,
  dxSkinOffice2013LightGray, dxSkinOffice2013White, dxSkinOffice2016Colorful,
  dxSkinOffice2016Dark, dxSkinOffice2019Black, dxSkinOffice2019Colorful,
  dxSkinOffice2019DarkGray, dxSkinOffice2019White, dxSkinPumpkin, dxSkinSeven,
  dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus, dxSkinSilver,
  dxSkinSpringtime, dxSkinStardust, dxSkinSummer2008, dxSkinTheAsphaltWorld,
  dxSkinTheBezier, dxSkinValentine, dxSkinVisualStudio2013Blue,
  dxSkinVisualStudio2013Dark, dxSkinVisualStudio2013Light, dxSkinVS2010,
  dxSkinWhiteprint, dxSkinWXI, dxSkinXmas2008Blue, Vcl.Menus, Vcl.StdCtrls,
  cxButtons, System.ImageList, Vcl.ImgList, cxImageList, cxTextEdit, cxLabel,
  cxGroupBox, cxRadioGroup, System.Net.HttpClientComponent, System.Net.URLClient,
  System.Net.HttpClient, System.JSON, cxMemo, System.StrUtils,  REST.JSON,
  Xml.XMLDoc, Xml.xmldom, Xml.XMLIntf, Vcl.ExtCtrls, Data.DB, Vcl.Grids,
  Vcl.DBGrids, cxStyles, cxCustomData, cxFilter, cxData, cxDataStorage,
  cxNavigator, dxDateRanges, dxScrollbarAnnotations, cxDBData;

type
  TfrmPrincipal = class(TForm)
    ImgPequenas: TcxImageList;
    DBGrid1: TDBGrid;
    pnlTop: TPanel;
    Label1: TLabel;
    pnlBarraPesquisa: TPanel;
    btnPesquisar: TcxButton;
    pnlJSONXML: TPanel;
    Panel2: TPanel;
    txtPesquisaCep: TEdit;
    Label2: TLabel;
    Label3: TLabel;
    rbJson: TRadioButton;
    rbXml: TRadioButton;
    pnlFooter: TPanel;
    pnlCadastro: TPanel;
    Panel4: TPanel;
    lblIdCep: TLabel;
    edtCep: TEdit;
    edtLogradouro: TEdit;
    edtComplemento: TEdit;
    rbInativo: TRadioButton;
    edtLocalidade: TEdit;
    rbAtivo: TRadioButton;
    edtBairro: TEdit;
    edtUf: TEdit;
    btnCancelar: TcxButton;
    btnSalvar: TcxButton;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    cxButton2: TcxButton;
    lblCadastroCep: TLabel;
    txtPesquisaEndereco: TEdit;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    procedure btnSalvarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cxButton2Click(Sender: TObject);
    procedure btnPesquisarClick(Sender: TObject);
  private
    { Private declarations }
    function FormatarJSON(const jsonStr: string): string;
    procedure ConsularCEP_JSON(const CEP: string);
    procedure ConsultarCEP_XML(const CEP: string);
    procedure SalvarDados_JSON;
    procedure limparcampos(formulario: TForm);
    function RemoveChar(Const Texto:String):String;
  public
    { Public declarations }
  end;

var
  frmPrincipal: TfrmPrincipal;
  cep, logradouro, complemento, bairro, localidade, uf: String;
  idCep: integer;
  resultadoJsonFormatado: string;
  cepNaoEncontrado: boolean;

implementation

{$R *.dfm}

uses uDmConexao;


procedure TfrmPrincipal.btnCancelarClick(Sender: TObject);
begin
  limparcampos(frmPrincipal);  pnlCadastro.Visible := False;
  txtPesquisa.Clear;
end;

procedure TfrmPrincipal.btnPesquisarClick(Sender: TObject);
begin
  if trim(txtPesquisa.Text) = '' then
    ShowMessage('O campo pesquisar não pode estar vazio')
  else
  begin
    idCep := dmConexao.verificarCepExiste(RemoveChar(txtPesquisa.Text));
    if idCep > 0 then
    begin
      if MessageDlg('O CEP selecionado já está cadastrado ! Deseja atualiza-lo ?', mtConfirmation, [mbYes, mbNo], 0, mbYes) = mrYes then
      begin
        lblCadastroCep.Caption := 'Atualizar CEP';
        pnlCadastro.Visible := true;
        lblIdCep.Caption :=  inttostr(idCep);
        edtCep.Text := dmConexao.qyCepVerificarnu_cep.AsString;
        edtLogradouro.Text := dmConexao.qyCepVerificards_logradouro.AsString;
        edtComplemento.Text := dmConexao.qyCepVerificards_complemento.AsString;
        edtBairro.Text := dmConexao.qyCepVerificards_bairro.AsString;
        edtLocalidade.Text := dmConexao.qyCepVerificards_localidade.AsString;
        edtUf.Text := dmConexao.qyCepVerificards_uf.AsString;
        if dmConexao.qyCepVerificartp_situacao.AsString = 'A' then
          rbAtivo.Checked := true;
        if dmConexao.qyCepVerificartp_situacao.AsString = 'I' then
          rbInativo.Checked := true;
      end;
    end
    else
    begin
      lblCadastroCep.Caption := 'Inserir CEP';
      if rbJson.Checked = True then
        ConsularCEP_JSON(txtPesquisa.Text);
      if rbXml.Checked = True then
        ConsultarCEP_XML(txtPesquisa.Text);
      SalvarDados_JSON;
      if resultadoJsonFormatado <> '' then
        dmConexao.inserirCep(cep, logradouro, complemento, bairro, localidade, uf);
      txtPesquisa.Clear;


//      pnlCadastro.Visible := true;
//      rbAtivo.Checked := true;
//      rbInativo.Checked := false;
    end;
  end;
end;

procedure TfrmPrincipal.btnSalvarClick(Sender: TObject);
var
  situacao: string;
begin
  if idCep > 0 then
  begin
    if rbAtivo.Checked = true then
       situacao := 'A';
    if rbInativo.Checked = true then
       situacao := 'I';
    dmConexao.atualizarCep(RemoveChar(edtCep.Text), edtLogradouro.Text, edtComplemento.Text, edtBairro.Text, edtLocalidade.Text, edtUf.Text, situacao, idCep);
  end
  else
  begin
    SalvarDados_JSON;
    dmConexao.inserirCep(RemoveChar(edtCep.Text), edtLogradouro.Text, edtComplemento.Text, edtBairro.Text, edtLocalidade.Text, edtUf.Text);
  end;
  dmConexao.atualizarGridCep;
  pnlCadastro.Visible := False;
  txtPesquisa.Clear;
end;

procedure TfrmPrincipal.ConsultarCEP_XML(const CEP: string);
var
  HttpClient: THttpClient;
  Response: IHttpResponse;
  XMLDocument: IXMLDocument;
  resultadoFormatado: string;
  CEPNode, LogradouroNode, ComplementoNode, BairroNode, LocalidadeNode, UFNode, IBGENode, GIANode, DDDNode, SIAFINode: IXMLNode;
begin
  HttpClient := THttpClient.Create;
  try
    Response := HttpClient.Get('https://viacep.com.br/ws/' + CEP + '/xml/');
    if Response.StatusCode = 200 then
    begin
      XMLDocument := LoadXMLData(Response.ContentAsString);
      resultadoFormatado := XMLDocument.XML.Text;
    end
    else
    begin
      ShowMessage('Erro ao obter os dados do endereço');
    //    ShowMessage('Erro ao consultar o CEP: ' + Response.StatusCode.ToString);
    end;
  finally
    HttpClient.Free;
  end;
end;


procedure TfrmPrincipal.ConsularCEP_JSON(const CEP: string);
var
  HttpClient: THttpClient;
  Response: IHttpResponse;
  JsonValue: TJSONValue;
begin
  HttpClient := THttpClient.Create;
  try
    Response := HttpClient.Get('https://viacep.com.br/ws/' + CEP + '/json/');
    if Response.StatusCode = 200 then
    begin
      JsonValue := TJSONObject.ParseJSONValue(Response.ContentAsString);
      try
        if Assigned(JsonValue) then
        begin
          resultadoJsonFormatado := FormatarJSON(JsonValue.ToString);
        end
      finally
        JsonValue.Free; // Liberar o JsonValue aqui
      end;
    end
    else
    begin
      ShowMessage('CEP Inexistente');
    end;
  finally
    HttpClient.Free;
  end;
end;

procedure TfrmPrincipal.SalvarDados_JSON;
var
  JSONString: string;
  JSONObject: TJSONObject;
begin
  JSONString := resultadoJsonFormatado;
  // Criar um objeto JSON a partir da string JSON
  JSONObject := TJSONObject.ParseJSONValue(JSONString) as TJSONObject;
  try
    // Verificar se o objeto JSON foi criado com sucesso
    if Assigned(JSONObject) then
    begin
      cep := RemoveChar(JSONObject.GetValue('cep').Value);
      logradouro := JSONObject.GetValue('logradouro').Value;
      complemento := JSONObject.GetValue('complemento').Value;
      bairro := JSONObject.GetValue('bairro').Value;
      localidade := JSONObject.GetValue('localidade').Value;
      uf := JSONObject.GetValue('uf').Value;
    end;
  finally
    JSONObject.Free;
  end;
end;
procedure TfrmPrincipal.cxButton2Click(Sender: TObject);
begin
  close;
end;

function TfrmPrincipal.FormatarJSON(const jsonStr: string): string;
var
  jsonObject: TJSONObject;
begin
  jsonObject := TJSONObject.ParseJSONValue(jsonStr) as TJSONObject;
  try
    if Assigned(jsonObject) then
      Result := TJSON.Format(jsonObject)
    else
      Result := '';
  finally
    jsonObject.Free;
  end;
end;

procedure TfrmPrincipal.FormShow(Sender: TObject);
begin
  idCep := 0;
  dmConexao.atualizarGridCep;
end;

procedure TfrmPrincipal.limparcampos(formulario: TForm);
var
  i: Integer;
begin
  for i := 1 to formulario.ComponentCount -1 do
  begin
     if formulario.Components[i] is TEdit then
       TEdit(formulario.Components[i]).Clear;
     if formulario.Components[i] is TRadioButton then
       TRadioButton(formulario.Components[i]).Checked := False;
  end;
end;

function TfrmPrincipal.RemoveChar(const Texto: String): String;
//
// Remove caracteres de uma string deixando apenas numeros
//
var
  I: integer;
  S: string;
begin
  S := '';
  for I := 1 To Length(Texto) Do
  begin
    if (Texto[I] in ['0'..'9']) then
    begin
    S := S + Copy(Texto, I, 1);
    end;
  end;
  result := S;
end;



end.
